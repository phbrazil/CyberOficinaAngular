{"version":3,"sources":["./src/app/users/add-edit.component.html","./src/app/users/layout.component.html","./src/app/users/list.component.ts","./src/app/users/users-routing.module.ts","./src/app/users/list.component.html","./src/app/users/add-edit.component.ts","./src/app/users/layout.component.ts","./src/app/users/users.module.ts"],"names":[],"mappings":"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","file":"users-users-module.js","sourcesContent":["export default \"<h1 *ngIf=\\\"isAddMode\\\">Adicionar Usuário</h1>\\n<h1 *ngIf=\\\"!isAddMode\\\">Editar Usuário</h1>\\n<form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group col\\\">\\n            <label for=\\\"firstName\\\">Primeiro Nome</label>\\n            <input type=\\\"text\\\" formControlName=\\\"firstName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.firstName.errors.required\\\">Primeiro Nome necessário</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group col\\\">\\n            <label for=\\\"lastName\\\">Último Nome</label>\\n            <input type=\\\"text\\\" formControlName=\\\"lastName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.lastName.errors.required\\\">Último Nome necessário</div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group col\\\">\\n            <label for=\\\"email\\\">Email</label>\\n            <input type=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.email.errors.required\\\">Email necessário</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group col\\\">\\n            <label for=\\\"cpfcnpj\\\">CPF/CNPJ</label>\\n            <input  type=\\\"text\\\" formControlName=\\\"cpfcnpj\\\" placeholder=\\\"CPF ou CNPJ\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.cpfcnpj.errors }\\\"\\n              />\\n            <div *ngIf=\\\"submitted && f.cpfcnpj.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.cpfcnpj.errors.required\\\">CPF/CNPJ necessário</div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group col\\\">\\n            <label for=\\\"username\\\">Usuário</label>\\n            <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.username.errors.required\\\">Usuário necessário</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group col\\\">\\n            <label for=\\\"password\\\">\\n                Senha\\n                <em *ngIf=\\\"!isAddMode\\\">(Deixe em branco para manter a mesma senha)</em>\\n            </label>\\n            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.password.errors.required\\\">Senha necessária</div>\\n                <div *ngIf=\\\"f.password.errors.minlength\\\">Senha deve conter ao menos 6 caractéres</div>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n        <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n            <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n            Salvar\\n        </button>\\n        <a routerLink=\\\"/users\\\" class=\\\"btn btn-link\\\">Cancelar</a>\\n    </div>\\n</form>\\n\";","export default \"<div class=\\\"p-4\\\">\\n    <div class=\\\"container\\\">\\n        <router-outlet></router-outlet>\\n    </div>\\n</div>\";","import { Component, OnInit } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\n\nimport { Injectable } from '@angular/core';\nimport { AccountService } from 'app/_services';\n\n@Injectable()\nexport class AuthService {\n\n  public getToken(): string {\n    return localStorage.getItem('token');\n  }\n\n}\n\n@Component({ templateUrl: 'list.component.html' })\nexport class ListComponent implements OnInit {\n    users = null;\n\n    constructor(private accountService: AccountService) {}\n\n    ngOnInit() {\n\n        this.accountService.getAll().pipe(first())\n            .subscribe(users => this.users = users);\n            \n    }\n\n    deleteUser(id: string) {\n        const user = this.users.find(x => x.id === id);\n        user.isDeleting = true;\n        this.accountService.delete(id)\n            .pipe(first())\n            .subscribe(() => {\n                this.users = this.users.filter(x => x.id !== id) \n            });\n    }\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LayoutComponent } from './layout.component';\nimport { ListComponent } from './list.component';\nimport { AddEditComponent } from './add-edit.component';\n\nconst routes: Routes = [\n    {\n        path: '', component: LayoutComponent,\n        children: [\n            { path: '', component: ListComponent },\n            { path: 'add', component: AddEditComponent },\n            { path: 'edit/:id', component: AddEditComponent }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class UsersRoutingModule { }","export default \"<div class=\\\"mt-4\\\">\\n<a routerLink=\\\"add\\\" class=\\\"btn btn-sm btn-success mb-2\\\">Adicionar Usuário</a>\\n<table class=\\\"table table-striped table-responsive\\\">\\n    <thead class=\\\"thead-dark\\\">\\n        <tr>\\n            <th style=\\\"width: 30%\\\">Primeiro Nome</th>\\n            <th style=\\\"width: 30%\\\">Último Nome</th>\\n            <th style=\\\"width: 30%\\\">Usuário</th>\\n            <th style=\\\"width: 30%\\\">Email</th>\\n            <th style=\\\"width: 30%\\\">CPF/CNPJ</th>\\n            <th style=\\\"width: 10%\\\"></th>\\n        </tr>\\n    </thead>\\n    <tbody>\\n        <tr *ngFor=\\\"let user of users\\\">\\n            <td>{{user.firstName}}</td>\\n            <td>{{user.lastName}}</td>\\n            <td>{{user.username}}</td>\\n            <td>{{user.email}}</td>\\n            <td>{{user.cpfcnpj}}</td>\\n            <td style=\\\"white-space: nowrap\\\">\\n                <a routerLink=\\\"edit/{{user.id}}\\\" class=\\\"btn btn-sm btn-primary mr-1\\\">Editar</a>\\n                <button (click)=\\\"deleteUser(user.id)\\\" class=\\\"btn btn-sm btn-danger btn-delete-user\\\" [disabled]=\\\"user.isDeleting\\\">\\n                    <span *ngIf=\\\"user.isDeleting\\\" class=\\\"spinner-border spinner-border-sm\\\"></span>\\n                    <span *ngIf=\\\"!user.isDeleting\\\">Deletar</span>\\n                </button>\\n            </td>\\n        </tr>\\n        <tr *ngIf=\\\"!users\\\">\\n            <td colspan=\\\"4\\\" class=\\\"text-center\\\">\\n                <span class=\\\"spinner-border spinner-border-lg align-center\\\"></span>\\n            </td>\\n        </tr>\\n    </tbody>\\n</table>\\n</div>\\n\\n\";","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { AccountService, AlertService } from 'app/_services';\n\n\n\n@Component({ templateUrl: 'add-edit.component.html' })\nexport class AddEditComponent implements OnInit {\n\n    //MASCARA CPF CNPJ\n    isCPF(): boolean{\n\n        return this.form.value.cpfcnpj == null ? \n        true : this.form.value.cpfcnpj.lenth < 12 ? true : false;\n    }\n\n    getCpfCnpjMask(): string{\n        return this.isCPF() ? '000.000.000-009' : '00.000.000/0000-00';\n    }\n\n    form: FormGroup;\n    id: string;\n    isAddMode: boolean;\n    loading = false;\n    submitted = false;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService,\n    ) {}\n\n\n\n    ngOnInit() {\n\n        \n        this.id = this.route.snapshot.params['id'];\n        this.isAddMode = !this.id;\n\n        // password not required in edit mode\n        const passwordValidators = [Validators.minLength(6)];\n        if (this.isAddMode) {\n            passwordValidators.push(Validators.required);\n        }\n\n        this.form = this.formBuilder.group({\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            username: ['', Validators.required],\n            email: ['', Validators.required],\n            cpfcnpj: ['', Validators.required],\n            password: ['', passwordValidators]\n        });\n\n        if (!this.isAddMode) {\n            this.accountService.getById(this.id)\n                .pipe(first())\n                .subscribe(x => {\n                    this.f.nome.setValue(x.nome);\n                    //this.f.lastName.setValue(x.lastName);\n                    //this.f.username.setValue(x.username);\n                    this.f.email.setValue(x.email);\n                    this.f.cpfcnpj.setValue(x.cpf);\n\n                });\n        }\n\n        \n    }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    onSubmit() {\n        this.submitted = true;\n\n        // reset alerts on submit\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        this.loading = true;\n        if (this.isAddMode) {\n            this.createUser();\n        } else {\n            this.updateUser();\n        }\n    }\n\n    private createUser() {\n        this.accountService.register(this.form.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.alertService.success('Usuário adicionado com sucesso!', { keepAfterRouteChange: true });\n                    this.router.navigate(['.', { relativeTo: this.route }]);\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n\n    private updateUser() {\n        this.accountService.update(this.id, this.form.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this.alertService.success('Usuário alterado com sucesso', { keepAfterRouteChange: true });\n                    this.router.navigate(['..', { relativeTo: this.route }]);\n                },\n                error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n\n  \n}\n","import { Component } from '@angular/core';\n\n@Component({ templateUrl: 'layout.component.html' })\nexport class LayoutComponent { }","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { UsersRoutingModule } from './users-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { ListComponent } from './list.component';\nimport { AddEditComponent } from './add-edit.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        UsersRoutingModule\n    ],\n    declarations: [\n        LayoutComponent,\n        ListComponent,\n        AddEditComponent\n    ]\n})\nexport class UsersModule { }"],"sourceRoot":"webpack:///"}